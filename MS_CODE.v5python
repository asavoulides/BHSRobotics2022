{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nPusher = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nShooterGroup_motor_a = Motor(Ports.PORT6, GearSetting.RATIO_36_1, True)\nShooterGroup_motor_b = Motor(Ports.PORT7, GearSetting.RATIO_36_1, True)\nShooterGroup = MotorGroup(ShooterGroup_motor_a, ShooterGroup_motor_b)\nIntake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nleft_drive_smart = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT13, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 11.937999999999999, 7.874, MM, 1)\nnumatic_1 = DigitalOut(brain.three_wire_port.h)\ncontroller_1 = Controller(PRIMARY)\nspinner = Motor(Ports.PORT2, GearSetting.RATIO_36_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject: Middle School Robotics \n#\tAuthor: Ryan Chan-Wu, Alex Savoulides\n#\tCreated: 11/19/22 (after the tragedy of the pdf)\n#\tConfiguration: \n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n    drivetrain.drive_for(REVERSE, 2, INCHES)\n    Intake.spin_for(REVERSE, 720, DEGREES)\n    drivetrain.turn_for(LEFT, 75, DEGREES)\n    ShooterGroup.set_velocity(100, PERCENT)\n    ShooterGroup.spin_for(FORWARD, 1440, DEGREES) and Pusher.spin_for(FORWARD, 1440, DEGREES)\n    ShooterGroup.spin_for(FORWARD, 720, DEGREES)\n\n\ndef user_control():\n    # place driver control in this while loop\n    while True:\n        Pusher.set_velocity(100, PERCENT)\n        if controller_1.buttonL1.pressing():\n            ShooterGroup.spin(FORWARD)\n        else:\n            ShooterGroup.stop()\n        if controller_1.buttonA.pressing():\n            ShooterGroup.set_velocity(60, PERCENT)\n            controller_1.screen.clear_row(1)\n            controller_1.screen.set_cursor(1,1)\n            controller_1.screen.print(\"Shooter: Veloc. 60%\")\n        if controller_1.buttonX.pressing():\n            ShooterGroup.set_velocity(75, PERCENT)\n            controller_1.screen.clear_row(2)\n            controller_1.screen.set_cursor(1,1)\n            controller_1.screen.print(\"Shooter: Veloc. 75%\")\n        if controller_1.buttonY.pressing():\n            ShooterGroup.set_velocity(100, PERCENT)\n            controller_1.screen.clear_row(2)\n            controller_1.screen.set_cursor(1,1)\n            controller_1.screen.print(\"Shooter: Veloc. 100%\")\n        if controller_1.buttonR1.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(FORWARD)\n        elif controller_1.buttonR2.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(REVERSE)\n        else:\n            Intake.set_velocity(0, PERCENT)\n        if controller_1.buttonB.pressing():\n            numatic_1.set(True)\n        else:\n            numatic_1.set(False)\n        if controller_1.buttonDown.pressing():\n            Pusher.spin(FORWARD)\n        elif controller_1.buttonUp.pressing()\n            Pusher.spin(REVERSE)\n        else:\n            Pusher.stop()\n        if controller_1.buttonLeft.pressing():\n            spinner.set_velocity(100, PERCENT)\n            spinner.spin(FORWARD)\n        elif controller_1.buttonRight.pressing():\n            spinner.spin(REVERSE)\n        else:\n            spinner.stop()\n        \n\n# create competition instance\n\ndef vex_auton():\n    auton_control_0 = Thread(autonomous)\n\n    while(competition.is_autonomous() and competition.is_enabled() ):\n        wait(10, MSEC)\n    \n    auton_control_0.stop()\n\ndef vex_driver():\n    driver_control_0 = Thread(user_control)\n\n    while(competition.is_driver_control() and competition.is_enabled() ):\n        wait(10, MSEC)\n    driver_control_0.stop()\n\ncompetition = Competition(vex_driver, vex_auton)\n\n","textLanguage":"python","rconfig":[{"port":[3],"name":"Pusher","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[6,7],"name":"ShooterGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[8],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11,13,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"0.47","unit":"in","wheelbase":"0.31","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[8],"name":"numatic_1","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"spinner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}