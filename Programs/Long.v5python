{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nShooterGroup_motor_a = Motor(Ports.PORT6, GearSetting.RATIO_36_1, True)\nShooterGroup_motor_b = Motor(Ports.PORT7, GearSetting.RATIO_36_1, True)\nShooterGroup = MotorGroup(ShooterGroup_motor_a, ShooterGroup_motor_b)\nIntake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nnumatic_1 = DigitalOut(brain.three_wire_port.h)\ncontroller_1 = Controller(PRIMARY)\nspinner = Motor(Ports.PORT2, GearSetting.RATIO_36_1, False)\npusher = DigitalOut(brain.three_wire_port.g)\nrear_distance = Distance(Ports.PORT20)\nleft_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT13, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT1)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nright_distance = Sonar(brain.three_wire_port.e)\nleft_distance = Sonar(brain.three_wire_port.c)\nspinner_switch = Limit(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n#endregion VEXcode Generated Robot Configuration\n#SHORT CODE\n# ------------------------------------------\n# \tProject: Middle School Robotics\n#\tAuthor: Ryan Chan-Wu, Alex Savoulides\n#\tCreated: 11/19/22 (after the tragedy of the pdf)\n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport math\n# Begin project code\n\n#Defining Variables\nRear_mm = rear_distance.object_distance(MM)\nLeft_mm = left_distance.distance(MM)\nRight_mm = right_distance.distance(MM)\n#function to remove clutter from syntax for print on controller screen..\ndef cprint(row,text):\n    controller_1.screen.clear_row(row)\n    controller_1.screen.set_cursor(row, 1)\n    controller_1.screen.print(str(text))\n\ndef bprint(row,text):\n    brain.screen.clear_row(row)\n    brain.screen.set_cursor(row, 1)\n    brain.screen.print(str(text))\n\n#---------------------Autonomous Short ------------------\ndef autonomous_short:\n    pass\n\n#---------------------Autonomous Long --------------------\ndef autonomous_long():\n    cprint(1, \"Auton. ON (LONG)\")\n#Autonomous Code\n    while Rear_mm > 700:\n        cprint(1, \"Dist. Remaining: \"+ str(700 - Rear_mm)+'mm')\n        drivetrain.set_drive_velocity(40, PERCENT)\n        drivetrain.drive(REVERSE)\n    cprint(1,'Turning To Roller')\n    drivetrain.turn_for(RIGHT,90,DEGREES)\n    cprint(1, 'Reversing To Roller')\n    while spinner.switch == False:\n        drivetrain.drive(REVERSE)\n    cprint(1, 'Sensor Contact')\n    drivetrain.drive(REVERSE)\n    wait(0.5,SECONDS)\n    cprint(1,'Rotating Spinner')\n    spinner.spin_for(FORWARD,10,DEGREES)\n    cprint(1,\"Calculating Angle's\") \n    net_dist = 1175-rear_mm\n    shoot_angle = math.atan(net_dist/Right_mm)\n    cprint(1,'Angle Calculated: '+str(shoot_angle))\n    drivetrain.turn_for(RIGHT,int(shoot_angle),DEGREES)\n    \n\n\n\n# ----------------------- Autonomous Skills ---------------------\ndef autonomous_skills():\n    drivetrain.drive(REVERSE, 2, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 28, INCHES)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(REVERSE, 32, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 65, INCHES) \n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 88, INCHES)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(REVERSE, 58, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 30, INCHES)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(REVERSE, 32, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)\n\n    \n    \n    \n\n#--------------Version Developed Prior to Distance Sensor---------------\n#def autonomous_long():\n#    cprint(1,\"Auton. ON (LONG)\")\n#    #           Autonomous Code\n#    # -------------------------------------\n#    drivetrain.set_drive_velocity(100, PERCENT)\n#    drivetrain.set_turn_velocity(100, PERCENT)\n#    ShooterGroup.set_velocity(100,PERCENT)\n#    drivetrain.drive_for(FORWARD,20, INCHES)\n#    drivetrain.set_turn_velocity(75,PERCENT)\n#    drivetrain.turn_for(LEFT,90,DEGREES)\n#    drivetrain.drive(REVERSE)\n#    wait(2,SECONDS)\n#    spinner.spin_for(REVERSE,100,DEGREES)\n#    drivetrain.stop()\n#    ShooterGroup.spin(FORWARD) \n#    wait(6, SECONDS)\n#    pusher.set(True)\n#    wait(2,SECONDS)\n#    pusher.set(False)\n#    cprint(1, 'Auton. Ended')\n#    controller_1.rumble('--')\n#    drivetrain.stop()\n#    controller_1.screen.clear_row(1)\n\n\ndef user_control():\n    controller_1.screen.clear_screen()\n    n_launched = False\n    s_velocity = 75\n    cprint(1, 'Shooter: Veloc: '+str(s_velocity)+'%')\n    # place driver control in this while loop\n    while True:\n        #Print Motor Temperature Status\n        bprint(1,'ShooterA Temp: '+str(ShooterGroup_motor_a.temperature(PERCENT)))\n        bprint(2,'ShooterB Temp: '+str(ShooterGroup_motor_b.temperature(PERCENT)))\n        bprint(3,'Intake Temp: '+str(Intake.temperature(PERCENT)))\n        bprint(4,'DrivetrainL Temp: '+str(left_drive_smart.temperature(PERCENT)))\n        bprint(5,'DrivetrainR Temp: '+str(right_drive_smart.temperature(PERCENT)))\n        bprint(6,'Spinner Temp: '+str(spinner.temperature(PERCENT)))\n        #Print Distance Sensor (For Debbuging)\n        bprint(7, 'RearDistance: '+ str(rear_distance.object_distance(MM))+'mm')\n        bprint(8, 'LeftDistance: '+ str(left_distance.distance(MM))+'mm')\n        bprint(9, 'RightDistance: '+ str(right_distance.distance(MM))+'mm')\n        #Update ShooterGroup Velocity\n        ShooterGroup.set_velocity(int(s_velocity), PERCENT) \n        countdown = 120 - brain.timer.time(SECONDS)\n        countdown = round(countdown)\n        if countdown > 0:\n            cprint(3, \"Time Remaining: \"+str(countdown)+\"s\")\n        else: \n            cprint(3, 'Time Elapsed: '+str(round(brain.timer.time(SECONDS))))\n        wait(150, MSEC)\n        if controller_1.buttonL1.pressing():\n            cprint(2, 'Shooter: '+ str(round(((ShooterGroup.velocity(PERCENT)/s_velocity)*100))) +'%')\n            ShooterGroup.spin(FORWARD)\n        else:\n            controller_1.screen.clear_row(2)\n            ShooterGroup.stop()\n            #ShooterGroup: -10\n        if controller_1.buttonA.pressing() and (int(s_velocity) >= 70):\n            s_velocity -= 10\n            #update status with text/vibration\n            cprint(1, 'Shooter: Veloc: '+str(s_velocity)+'%')\n            controller_1.rumble(\".\")\n            #ShooterGroup: +5\n        if controller_1.buttonX.pressing() and (int(s_velocity) <= 95):\n            s_velocity += 5\n            #update status with text/vibration\n            cprint(1, 'Shooter: Veloc: '+str(s_velocity)+'%')\n            controller_1.rumble(\".\")\n            #ShooterGroup + 10\n        if controller_1.buttonY.pressing() and (int(s_velocity) <= 90) and (int(s_velocity) >= 20):\n            s_velocity += 10\n            #update status with text/vibration\n            cprint(1, 'Shooter: Veloc: '+str(s_velocity)+'%')\n            controller_1.rumble(\".\")\n        if controller_1.buttonR1.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(FORWARD)\n        elif controller_1.buttonR2.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(REVERSE)\n        else:\n            Intake.set_velocity(0, PERCENT)\n        if controller_1.buttonB.pressing():\n            numatic_1.set(True)\n            controller_1.rumble(\"-\")\n            n_launched = True\n        else:\n            numatic_1.set(False)\n        if controller_1.buttonDown.pressing():\n            pusher.set(False)\n            controller_1.rumble(\"-\")\n        else:\n            pusher.set(True)\n        if controller_1.buttonLeft.pressing():\n            spinner.set_velocity(100, PERCENT)\n            spinner.spin(FORWARD)\n        elif controller_1.buttonRight.pressing():\n            spinner.spin(REVERSE)\n        else:\n            spinner.stop()\n        if controller_1.buttonL2.pressing():\n            autonomous_long()\n# create competition instance\n\ndef vex_auton():\n    auton_control_0 = Thread(autonomous_long)\n\n    while(competition.is_autonomous() and competition.is_enabled() ):\n        wait(10, MSEC)\n    \n    auton_control_0.stop()\n\ndef vex_driver():\n    driver_control_0 = Thread(user_control)\n\n    while(competition.is_driver_control() and competition.is_enabled()):\n        wait(10, MSEC)\n    driver_control_0.stop()\n\ncompetition = Competition(vex_driver, vex_auton)\n\n\n","textLanguage":"python","rconfig":[{"port":[6,7],"name":"ShooterGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[8],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"numatic_1","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"spinner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[7],"name":"pusher","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"rear_distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10,11,12,13,1],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5,6],"name":"right_distance","customName":true,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3,4],"name":"left_distance","customName":true,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"spinner_switch","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}