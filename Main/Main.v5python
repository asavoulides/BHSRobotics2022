{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nShooterGroup_motor_a = Motor(Ports.PORT6, GearSetting.RATIO_36_1, True)\nShooterGroup_motor_b = Motor(Ports.PORT7, GearSetting.RATIO_36_1, True)\nShooterGroup = MotorGroup(ShooterGroup_motor_a, ShooterGroup_motor_b)\nIntake = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nexpansion = DigitalOut(brain.three_wire_port.h)\ncontroller_1 = Controller(PRIMARY)\nspinner = Motor(Ports.PORT2, GearSetting.RATIO_36_1, False)\npusher = DigitalOut(brain.three_wire_port.g)\nrear_distance = Distance(Ports.PORT20)\nleft_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT13, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT1)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nright_distance = Sonar(brain.three_wire_port.e)\nleft_distance = Sonar(brain.three_wire_port.c)\nspinner_switch = Limit(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n#endregion VEXcode Generated Robot Configuration\n#SHORT CODE\n# ------------------------------------------\n# \tProject: Middle School Robotics\n#\tAuthor: Ryan Chan-Wu, Alex Savoulides\n#\tCreated: 11/19/22 (after the tragedy of the pdf)\n# ------------------------------------------\n\n#Velocity Function\nwait(30, MSEC)\n#Defining ShooterGroup Reference:\n#Using Inches to calculate the ShooterGroup Velocity\nvelocity = {\n    0: \"x\", #ex. 0 is 0 Inches, and \"x\" should be replaced with the shooter velocity requiried to score. X should obviously not be a string and instead be updated to a integer.\n    1: \"x\",\n    2: \"x\",\n    3: \"x\",\n    4: \"x\",\n    5: \"x\",\n    6: \"x\",\n    7: \"x\",\n    8: \"x\",\n    9: \"x\",\n    10: \"x\"\n}\n\n\n#--------------------Functions Begin----------------\n#Function to print on screen mainly to clear clutter\ndef cprint(row,text):\n    controller_1.screen.clear_row(row)\n    controller_1.screen.set_cursor(row, 1)\n    controller_1.screen.print(str(text))\n\n#Function to print on brain mainly to clear clutter\ndef bprint(row,text):\n    brain.screen.clear_row(row)\n    brain.screen.set_cursor(row, 1)\n    brain.screen.print(str(text))\n\n#ShooterGroup Shooting Function\ndef shooter(percent):\n    ShooterGroup.set_velocity(percent,PERCENT)\n    ShooterGroup.spin(FORWARD)\n    wait(6,SECONDS)\n    pusher.set(True)\n    wait(1,SECONDS)\n    pusher.set(False)\n\n#Drivetrain Velocity Function\ndef driveveloc(percent):\n    left_motor_a.set_velocity(percent,PERCENT)\n    left_motor_b.set_velocity(percent,PERCENT)\n    right_motor_a.set_velocity(percent,PERCENT)\n    right_motor_b.set_velocity(percent,PERCENT)\n\n#---------------------Autonomous Short ------------------\ndef autonomous_short():\n    #cprint(1, 'Auton. ON (SHORT')\n    while spinner_switch == False:\n        drivetrain.drive(REVERSE)\n    drivetrain.stop()\n    spinner.spin_for(FORWARD,10,DEGREES)\n    drivetrain.turn_for(LEFT,10,DEGREES)\n    \n#---------------------Autonomous Long --------------------\ndef autonomous_long():\n#Updating status on screen utilizing cprint function\n    cprint(1, \"Auton. ON (LONG)\")\n#Defining Variables\n    shooter_veloc = 0\n#Setting Velocities\n    driveveloc(70)\n#Autonomous Program\n    #While loop to reverse until distance sensor is roughly 700\n    while rear_distance.object_distance(MM) > 700:\n        #30 MSEC wait to prevent distorientation on cprint function\n        wait(30, MSEC)\n        #consistently updating controller screen for debugging purposes\n        #cprint(1, f\"Dist. Rem.: {700-rear_distance.object_distance(MM)} mm\")\n        #finally - we do what the function is intended to - reverse\n        drivetrain.drive(REVERSE)\n    #updating status on screen.\n    cprint(1,'Turning To Roller')\n    #turning right in preperation to get in contact with roller\n    drivetrain.turn_for(RIGHT,90,DEGREES)\n    #Updating status on screen\n    cprint(1, 'Reversing To Roller')\n    #Reversing to roller until the switch contact sensor detects contact\n    while spinner_switch == False:\n        drivetrain.drive(REVERSE)\n    #Updating status on screen \n    cprint(1, 'Sensor Contact')\n    #Terminating reverse functions\n    drivetrain.stop()\n    #updating spinner status\n    cprint(1,'Rotating Spinner')\n    #spinning spinner for 10 degrees\n    spinner.spin_for(FORWARD,10,DEGREES)\n    #go forwards in order to prevent turning against spinner\n    drivetrain.drive_for(FORWARD,1,INCHES)\n    #updating status on screen\n    cprint(1,\"Calculating Angle's\") \n    #calculating the total distance between robot and net\n    net_dist = 1175-int(rear_distance.object_distance(MM))\n    #using magic invented by Muhammad ibn M큰s훮 al-Khw훮rizm카 in 9th century AD\n    shoot_angle = math.atan(1175-int(rear_distance.object_distance(MM)))/(right_distance.distance(MM))\n    #updating status on screen to display that the angle has indeed been calculated\n    #cprint(1,f'Angle Calculated: {shoot_angle}%')\n    #turning to the angle previously calculated\n    drivetrain.turn_for(RIGHT,int(shoot_angle),DEGREES)\n    #we shall create a statement that calcualted velocity based off of how much \n    final_veloc = velocity[int(net_dist)]\n    ShooterGroup.set_velocity(final_veloc, PERCENT)\n \n      \n    \n# ----------------------- Autonomous Skills (ALEX) -----------------------\ndef autonomous_skills_alex():\n    #Setting Velocities\n    driveveloc(70)\n    #Spinning 1\n    while spinner_switch is False:\n        drivetrain.drive(REVERSE)\n    #Spinner 1 Completed\n    spinner.spin_for(FORWARD,10,DEGREES)\n    drivetrain.stop()\n    #-------Spinner 2 Start---------\n    #driving towards other spinner\n    drivetrain.drive_for(FORWARD,10,INCHES) #modify this variable, again.\n    #turning to align\n    drivetrain.turn_for(RIGHT,90,DEGREES)\n    #reversing until spinner contact\n    while spinner_switch is False: \n        drivetrain.drive(REVERSE)\n    #Correction amount\n    drivetrain.set_drive_velocity((60,PERCENT))\n    drivetrain.drive(REVERSE)\n    spinner.spin_for(FORWARD,10,DEGREES)\n    drivetrain.stop()\n    #--------Spinner 2 Completed--------\n    #Updating velocity move to other spinners\n    driveveloc(100)\n    #Aligning with the diagnal line\n    drivetrain.turn_for(LEFT,45,DEGREES)\n    #Driving enough to prepare for reverse enterence\n    drivetrain.drive_for(FORWARD,5,INCHES)\n    #Reversing (Sensors are on rear)\n    drivetrain.turn_for(LEFT,360,DEGREES)\n    #Reversing until something is detected\n    while not(rear_distance.is_object_detected()):\n        drivetrain.drive(REVERSE)\n    #Reversing until near the things\n    while rear_distance.object_distance(INCHES) > 15: #Again modify this variable to whatever fits\n        drivetrain.drive(REVERSE)\n        \n\n\n# ----------------------- Autonomous Skills (Ryan)---------------------\ndef autonomous_skills():\n    #Ryan - plz use comments to make this readable\n    drivetrain.drive_for(REVERSE, 2, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 28, INCHES)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(REVERSE, 32, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 65, INCHES) \n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 88, INCHES)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(REVERSE, 58, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 30, INCHES)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(REVERSE, 32, INCHES)\n    spinner.spin_for(REVERSE, 90, DEGREES)   \n\n\n#--------------Version Developed Prior to Distance Sensor---------------\n#def autonomous_long():\n#    cprint(1,\"Auton. ON (LONG)\")\n#    #           Autonomous Code\n#    # -------------------------------------\n#    drivetrain.set_drive_velocity(100, PERCENT)\n#    drivetrain.set_turn_velocity(100, PERCENT)\n#    ShooterGroup.set_velocity(100,PERCENT)\n#    drivetrain.drive_for(FORWARD,20, INCHES)\n#    drivetrain.set_turn_velocity(75,PERCENT)\n#    drivetrain.turn_for(LEFT,90,DEGREES)\n#    drivetrain.drive(REVERSE)\n#    wait(2,SECONDS)\n#    spinner.spin_for(REVERSE,100,DEGREES)\n#    drivetrain.stop()\n#    ShooterGroup.spin(FORWARD) \n#    wait(6, SECONDS)\n#    pusher.set(True)\n#    wait(2,SECONDS)\n#    pusher.set(False)\n#    cprint(1, 'Auton. Ended')\n#    controller_1.rumble('--')\n#    drivetrain.stop()\n#    controller_1.screen.clear_row(1)\n\n\n#Creating user_control function\ndef user_control():\n    #initilizing full screen for text commands\n    controller_1.screen.clear_screen()\n    #setting shooter velocity variable to 75%\n    s_velocity = 75\n    #updating the shooter velocity after autonomous mode\n    #cprint(1, f'Shooter: Veloc: {s_velocity}%')\n    # place driver control in this while loop\n    while True:\n        #Print Motor Temperature Status\n        #ShooterGroup\n        #bprint(1,f'ShooterA Temp: {ShooterGroup_motor_a.temperature(PERCENT)}%')\n        #bprint(2,f'ShooterB Temp: {ShooterGroup_motor_b.temperature(PERCENT)}%')\n        #Intake\n        #bprint(3,f'Intake Temp: {Intake.temperature(PERCENT)}%')\n        #Drivetrain\n        #bprint(4,f'DrivetrainL1 Temp: {left_motor_a.temperature(PERCENT)}%') \n        #bprint(5,f'DrivetrainL2 Temp: {left_motor_b.temperature(PERCENT)}%') \n        #bprint(6,f'DrivetrainR1 Temp: {right_motor_a.temperature(PERCENT)}%')\n        #bprint(7,f'DrivetrainR2 Temp: {right_motor_b.temperature(PERCENT)}%') \n        #Spinner\n        #bprint(8,f'Spinner Temp: {spinner.temperature(PERCENT)}%')\n        #Print Distance Sensor (For Debbuging)\n        #bprint(9,f'RearDistance: {rear_distance.object_distance(MM)} mm')\n        #bprint(10,f'LeftDistance: {left_distance.distance(MM)} mm')\n        #bprint(11,f'RightDistance: {right_distance.distance(MM)} mm' )        \n        #Updating ShooterGroup VElocity\n        ShooterGroup.set_velocity(int(s_velocity), PERCENT)\n        #Defining Variables\n        relativeshooterveloc = round(((((ShooterGroup_motor_a.velocity(PERCENT)\\\n                *ShooterGroup_motor_b.velocity(PERCENT))/2)/s_velocity)*100))\n        #Setting Buttons\n        if controller_1.buttonL1.pressing():\n            #Displaying the ShooterGroup Velocity on Screen.\n            #cprint(2, f'Shooter: {relativeshooterveloc}%')\n            ShooterGroup.spin(FORWARD)\n        else:\n            controller_1.screen.clear_row(2)\n            ShooterGroup.stop()\n            #ShooterGroup: -10\n        if controller_1.buttonA.pressing() and (int(s_velocity) >= 70):\n            s_velocity -= 10\n            #update status with text/vibration\n            #cprint(1, f'Shooter: Veloc: {s_velocity} %')\n            controller_1.rumble(\".\")\n            #ShooterGroup: +5\n        if controller_1.buttonX.pressing() and (int(s_velocity) <= 95):\n            s_velocity += 5\n            #update status with text/vibration\n            #cprint(1, f'Shooter: Veloc: {s_velocity} %')\n            controller_1.rumble(\".\")\n            #ShooterGroup + 10\n        if controller_1.buttonY.pressing() and (int(s_velocity) <= 90):\n            s_velocity += 10\n            #update status with text/vibration\n            #cprint(1, f'Shooter: Veloc: {s_velocity} %')\n            controller_1.rumble(\".\")\n        if controller_1.buttonR1.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(FORWARD)\n        elif controller_1.buttonR2.pressing():\n            Intake.set_velocity(100, PERCENT)\n            Intake.spin(REVERSE)\n        else:\n            Intake.set_velocity(0, PERCENT)\n        if controller_1.buttonB.pressing():\n            expansion.set(True)\n            controller_1.rumble(\"-\")\n        else:\n            expansion.set(False)\n        if controller_1.buttonDown.pressing():\n            pusher.set(False)\n            controller_1.rumble(\"-\")\n        else:\n            pusher.set(True)\n        if controller_1.buttonLeft.pressing():\n            spinner.set_velocity(100, PERCENT)\n            spinner.spin(FORWARD)\n        elif controller_1.buttonRight.pressing():\n            spinner.spin(REVERSE)\n        else:\n            spinner.stop()\n        #Temporary for debugging purposes \n        if controller_1.buttonL2.pressing():\n            autonomous_long()\n\n#     Competition Format (Do Not Modify)\n# ------------------------------------------\n\ndef vex_auton():\n    auton_control_0 = Thread(autonomous_long)\n\n    while(competition.is_autonomous() and competition.is_enabled() ):\n        wait(10, MSEC)\n    \n    auton_control_0.stop()\n\ndef vex_driver():\n    driver_control_0 = Thread(user_control)\n\n    while(competition.is_driver_control() and competition.is_enabled()):\n        wait(10, MSEC)\n    driver_control_0.stop()\n\ncompetition = Competition(vex_driver, vex_auton)\n\n\n","textLanguage":"python","rconfig":[{"port":[6,7],"name":"ShooterGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[8],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"expansion","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"spinner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[7],"name":"pusher","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"rear_distance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10,11,12,13,1],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5,6],"name":"right_distance","customName":true,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3,4],"name":"left_distance","customName":true,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"spinner_switch","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}