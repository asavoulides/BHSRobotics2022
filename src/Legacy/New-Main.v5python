{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT5)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\nspinner = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\npusher = DigitalOut(brain.three_wire_port.a)\nexpansion = DigitalOut(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ndef cprint(row,text):\n    controller_1.screen.clear_row(row)\n    controller_1.screen.set_cursor(row, 1)\n    controller_1.screen.print(str(text))\n\ndef rumble(patern):\n    patern = str(patern)\n    controller_1.rumble(patern)\n\n#Function to print on brain mainly to clear clutter\ndef bprint(row,text,column=1):\n    brain.screen.clear_row(row)\n    brain.screen.set_cursor(row, column)\n    brain.screen.print(str(text))\n\n#ShooterGroup Shooting Function\ndef disk_launch(percent, times):\n    intake.set_velocity(100, PERCENT)\n    intake.spin(FORWARD)\n    for i in range(times):\n        ShooterGroup.set_velocity(percent,PERCENT)\n        ShooterGroup.spin(FORWARD)\n        wait(3,SECONDS)\n        pusher.set(False)\n        wait(200,MSEC)\n        pusher.set(True)\n    ShooterGroup.stop()\n    intake.stop()\n\ndef preAutonomous():\n    pass\n\ndef autonomous_short():\n    pass\n\ndef autonomous_long():\n    pass\n\ndef autonomous_skills():\n    pass\n\n#----------------PID----------------\n\ndef pid(expected,d_velocity=100):\n    expected = (expected + drivetrain_inertial.rotation(DEGREES))\n\n    wait(0.25, SECONDS)\n    \n    error = expected\n\n    while True:\n        actual = drivetrain_inertial.rotation(DEGREES)\n        error = (expected - actual)\n        speed = (error * 0.5)\n        left_motor_a.set_velocity(speed,PERCENT)\n        left_motor_b.set_velocity(speed,PERCENT)\n        right_motor_a.set_velocity(-speed,PERCENT)\n        right_motor_b.set_velocity(-speed,PERCENT)\n        \n        left_motor_a.spin(FORWARD)\n        left_motor_b.spin(FORWARD)\n        right_motor_a.spin(FORWARD)\n        right_motor_b.spin(FORWARD)\n        \n        cprint(2,str(error))\n\n        if abs(error) < 2:\n            break\n\n        wait(0.15,SECONDS)\n            \n    drivetrain.stop()\n    left_motor_a.set_velocity(d_velocity,PERCENT)\n    left_motor_b.set_velocity(d_velocity,PERCENT)\n    right_motor_a.set_velocity(d_velocity,PERCENT)\n    right_motor_b.set_velocity(d_velocity,PERCENT)\n    cprint(2,'PID Completed') \n\n\ndef driverControl():\n    userFeedbackThread = Thread(userFeedback) #Creating Threads to maximize efficency\n    while True:\n        pass\n\n\ndef userFeedback():\n    while True:\n        pass\n\n\n\nmy_thread1 = Thread(driverControl)\n\n        \n\ncomp = Competition(driverControl, autonomous_short)\npreAutonomous()","textLanguage":"python","rconfig":[{"port":[1,2,3,4,5],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[6],"name":"spinner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"pusher","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"expansion","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}